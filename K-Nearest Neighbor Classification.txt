#K-Nearest Neighbor Classification Technique on iris dataset
 
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from scipy.stats import mode
from sklearn.metrics import accuracy_score, classification_report

# -----------------------------
# 1. Load and prepare data
# -----------------------------
iris = load_iris()
X, y = iris.data[:, :2], iris.target  # first two features for visualization

scaler = StandardScaler()
X = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# -----------------------------
# 2. Euclidean KNN implementation
# -----------------------------
def euclidean_knn_predict(X_train, y_train, X_test, k=5):
    # Compute pairwise distances
    dists = np.sqrt(((X_test[:, None, :] - X_train[None, :, :]) ** 2).sum(axis=2))
    idx = np.argsort(dists, axis=1)[:, :k]  # smaller distances
    y_pred = np.array([mode(y_train[i], keepdims=False).mode for i in idx])
    return y_pred
y_pred = euclidean_knn_predict(X_train, y_train, X_test, k=5)

# Accuracy
acc = accuracy_score(y_test, y_pred)
print(f"Accuracy: {acc:.4f}\n")

# Classification report
print("Classification Report:")
print(classification_report(y_test, y_pred, target_names=iris.target_names))